{
  "language": "Solidity",
  "sources": {
    "contracts/CDPView.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Vat {\r\n    struct Urn {\r\n        uint256 ink;\r\n        uint256 art;\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;\r\n        uint256 rate;\r\n        uint256 spot;\r\n        uint256 line;\r\n        uint256 dust;\r\n    }\r\n\r\n    mapping(bytes32 => mapping(address => Urn)) public urns;\r\n    mapping(bytes32 => Ilk) public ilks;\r\n}\r\n\r\nabstract contract Manager {\r\n    function ilks(uint) public view virtual returns (bytes32);\r\n\r\n    function owns(uint) public view virtual returns (address);\r\n\r\n    function urns(uint) public view virtual returns (address);\r\n}\r\n\r\nabstract contract DSProxy {\r\n    function owner() public view virtual returns (address);\r\n}\r\n\r\ncontract VaultInfo is DSMath {\r\n    Manager manager = Manager(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n    Vat vat = Vat(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n\r\n    function _getProxyOwner(\r\n        address owner\r\n    ) external view returns (address userAddr) {\r\n        DSProxy proxy = DSProxy(owner);\r\n        userAddr = proxy.owner();\r\n    }\r\n\r\n    function testManager() public view returns (address) {\r\n        return manager.owns(10015);\r\n    }\r\n\r\n    function getCdpInfo(\r\n        uint _cdpId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address urn,\r\n            address owner,\r\n            address userAddr,\r\n            bytes32 ilk,\r\n            uint collateral,\r\n            uint debt\r\n        )\r\n    {\r\n        ilk = manager.ilks(_cdpId);\r\n        urn = manager.urns(_cdpId);\r\n        owner = manager.owns(_cdpId);\r\n        userAddr = address(0);\r\n        try this._getProxyOwner(owner) returns (address user) {\r\n            userAddr = user;\r\n        } catch {}\r\n\r\n        (collateral, debt) = vat.urns(ilk, urn);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}